name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint
      continue-on-error: true

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate
        npm audit --json > audit-results.json || true
      continue-on-error: true

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: audit-results
        path: audit-results.json
        retention-days: 30

    - name: Check for high/critical vulnerabilities
      run: |
        if npm audit --audit-level=high; then
          echo "✅ No high or critical vulnerabilities found"
        else
          echo "❌ High or critical vulnerabilities detected"
          npm audit --audit-level=high
          exit 1
        fi

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Check for .env files in commits
      run: |
        if git log --name-only --pretty=format: | grep -E '\.(env|environment)' | grep -v '\.example'; then
          echo "❌ Environment files detected in git history!"
          echo "Run the cleanup commands provided in the security documentation"
          exit 1
        else
          echo "✅ No environment files found in git history"
        fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        REACT_APP_SUPABASE_URL: https://example.supabase.co
        REACT_APP_SUPABASE_ANON_KEY: example_key_for_build_only

    - name: Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test -- --coverage --watchAll=false
        else
          echo "No tests configured"
        fi
      continue-on-error: true

    - name: Check bundle size
      run: |
        if [ -d "build/static/js" ]; then
          echo "📦 Bundle sizes:"
          ls -lh build/static/js/*.js
          
          # Check if any JS bundle is larger than 2MB
          if find build/static/js -name "*.js" -size +2M | grep -q .; then
            echo "⚠️  Large bundle detected (>2MB)"
          else
            echo "✅ Bundle sizes are reasonable"
          fi
        fi

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, codeql-analysis, secret-scan, build-test]
    if: always()
    
    steps:
    - name: Security Check Summary
      run: |
        echo "## 🔒 Security Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.security-audit.result }}" == "success" ]; then
          echo "✅ **Security Audit**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Security Audit**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.codeql-analysis.result }}" == "success" ]; then
          echo "✅ **CodeQL Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **CodeQL Analysis**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.secret-scan.result }}" == "success" ]; then
          echo "✅ **Secret Scanning**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Secret Scanning**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-test.result }}" == "success" ]; then
          echo "✅ **Build & Test**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build & Test**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 **Next Steps**: Review any failed checks and address security issues before merging." >> $GITHUB_STEP_SUMMARY
